library(plyr) # For data manipulation
library(tidyverse) # For data manipulation
library(mctoolsr) # For microbial analyses
library(vegan) # For multivariate stats
library(RColorBrewer) # For colors
library(microseq) # For fastas
library(car) # For stats
library(MASS) # For stats
library(FSA) # For SE
library(lme4) # For LMER
library(emmeans) # For TukeyHSD
library(multcomp) # For cld
library(lmerTest) # For Sattherwaite df
library(afex) # For alternative mixed model
library(ggh4x) # For plots
library(ggrepel) # For plot text
library(cowplot) # For multipanel
library(phyloseq) # For networks
library(SpiecEasi) # For networks
library(igraph) # For networks
library(rnetcarto) # For networks
library(writexl) # Export
library(naniar) # For NA management
library(pheatmap) # For heatmaps
library(iCAMP) # NTI
library(ape) # Phylogenetics
library(phyloseq) # microbial analyses, can handle trees
library(picante) # Trees
library(conditionz)
library(taxize) # version 0.9.100.1 from archive
# Repo Directory
setwd("~/Documents/GitHub/SunflowerG/")
# Functions
`%notin%` <- Negate(`%in%`)
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
source("code/effectSize.R")
source("code/run_taxa_null_model.R")
source("code/run_div_null_model.R")
source("code/run_sclero_regressions.R")
MyDiamond <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.frame.color <- params("vertex", "frame.color")
if (length(vertex.frame.color) != 1 && !is.null(v)) {
vertex.frame.color <- vertex.frame.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color, fg=vertex.frame.color,
stars=cbind(vertex.size, vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("diamond", clip=shapes("circle")$clip,
plot=MyDiamond, parameters=list(vertex.frame.color="white",
vertex.frame.width=1))
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("triangle", clip=shapes("circle")$clip,
plot=mytriangle)
# K01426 (amiE)
iaa <- read.delim("data/K01426.txt") %>%
mutate(Genome.Name = gsub("Candidatus ", "", Genome.Name)) %>% # remove Candidatus
separate(Genome.Name, into = c("Genus", "Species", "Strain1", "Strain2"),
sep = " ", remove = F) %>%
filter(Genus != "Uncultured") %>% # removes 114
filter(Domain %in% c("Archaea", "Bacteria"))
iaa_genus <- iaa %>%
group_by(Genus) %>%
summarise(count = n())
# K21801 (iaaH)
iaa <- read.delim("data/K21801.txt") %>%
mutate(Genome.Name = gsub("Candidatus ", "", Genome.Name)) %>% # remove Candidatus
separate(Genome.Name, into = c("Genus", "Species", "Strain1", "Strain2"),
sep = " ", remove = F) %>%
filter(Genus != "Uncultured") %>% # removes 114
filter(Domain %in% c("Archaea", "Bacteria"))
iaa_genus <- iaa %>%
group_by(Genus) %>%
summarise(count = n())
taxonomy_info <- classification(iaa_genus$Genus, db = "ncbi")
iaa_taxonomy <- as.data.frame(matrix(data = NA, nrow = nrow(iaa_genus), ncol = 5)) %>%
set_names(c("Phylum", "Class", "Order", "Family", "Genus"))
for (i in 1:nrow(iaa_genus)) {
resP <- taxonomy_info[[i]] %>%
filter(rank == "phylum") %>%
pull(name)
iaa_taxonomy$Phylum[i] <- if (length(resP) == 0) NA else resP
resC <- taxonomy_info[[i]] %>%
filter(rank == "class") %>%
pull(name)
iaa_taxonomy$Class[i] <- if (length(resC) == 0) NA else resC
resO <- taxonomy_info[[i]] %>%
filter(rank == "order") %>%
pull(name)
iaa_taxonomy$Order[i] <- if (length(resO) == 0) NA else resO
resF <- taxonomy_info[[i]] %>%
filter(rank == "family") %>%
pull(name)
iaa_taxonomy$Family[i] <- if (length(resF) == 0) NA else resF
iaa_taxonomy$Genus[i] <- names(taxonomy_info)[i]
}
View(taxonomy_info)
taxonomy_info <- Filter(function(x) !is.logical(x), taxonomy_info)
iaa_taxonomy <- as.data.frame(matrix(data = NA, nrow = nrow(iaa_genus), ncol = 5)) %>%
set_names(c("Phylum", "Class", "Order", "Family", "Genus"))
length(taxonomy_info)
iaa_taxonomy <- as.data.frame(matrix(data = NA, nrow = length(taxonomy_info), ncol = 5)) %>%
set_names(c("Phylum", "Class", "Order", "Family", "Genus"))
for (i in 1:length(taxonomy_info)) {
resP <- taxonomy_info[[i]] %>%
filter(rank == "phylum") %>%
pull(name)
iaa_taxonomy$Phylum[i] <- if (length(resP) == 0) NA else resP
resC <- taxonomy_info[[i]] %>%
filter(rank == "class") %>%
pull(name)
iaa_taxonomy$Class[i] <- if (length(resC) == 0) NA else resC
resO <- taxonomy_info[[i]] %>%
filter(rank == "order") %>%
pull(name)
iaa_taxonomy$Order[i] <- if (length(resO) == 0) NA else resO
resF <- taxonomy_info[[i]] %>%
filter(rank == "family") %>%
pull(name)
iaa_taxonomy$Family[i] <- if (length(resF) == 0) NA else resF
iaa_taxonomy$Genus[i] <- names(taxonomy_info)[i]
}
iaa_taxonomy <- iaa_taxonomy %>%
left_join(., iaa_genus, by = "Genus")
iaa_family <- iaa_taxonomy %>%
group_by(Phylum, Class, Order, Family) %>%
summarise(count = sum(count))
hyph <- iaa_family %>%
filter(Family == "Hyphomonadaceae")
iaa_order <- iaa_taxonomy %>%
group_by(Phylum, Class, Order) %>%
summarise(count = sum(count))
soli <- iaa_order %>%
filter(Order == "Solirubrobacterales")
poly <- iaa_order %>%
filter(Order == "Polyangiales")
iaa_class <- iaa_taxonomy %>%
group_by(Phylum, Class) %>%
summarise(count = sum(count))
holo <- iaa_class %>%
filter(Class == "Holophagae")
iaa_phylum <- iaa_taxonomy %>%
group_by(Phylum) %>%
summarise(count = sum(count))
View(iaa_phylum)
# K01721
iaa <- read.delim("data/K01721.txt") %>%
mutate(Genome.Name = gsub("Candidatus ", "", Genome.Name)) %>% # remove Candidatus
separate(Genome.Name, into = c("Genus", "Species", "Strain1", "Strain2"),
sep = " ", remove = F) %>%
filter(Genus %notin% c("Uncultured", "unclassified", "co-assembly", "putative")) %>%
filter(Domain %in% c("Bacteria"))
iaa_genus <- iaa %>%
group_by(Genus) %>%
summarise(count = n())
taxonomy_info <- classification(iaa_genus$Genus, db = "ncbi")
taxonomy_info_K21801 <- taxonomy_info
saveRDS(taxonomy_info_K21801, "data/taxonomy_info_K21801.rds")
View(iaa_genus)
iaa_genus <- iaa %>%
group_by(Genus) %>%
summarise(count = n()) %>%
left_join(., taxonomy_info_K21801, by = "Genus")
View(taxonomy_info_K21801)
View(iaa_taxonomy)
iaa_taxonomy_K21801 <- iaa_taxonomy
iaa_genus <- iaa %>%
group_by(Genus) %>%
summarise(count = n()) %>%
left_join(., iaa_taxonomy_K21801, by = "Genus")
View(iaa_genus)
View(iaa_taxonomy)
View(iaa_taxonomy_K21801)
iaa_genus_toclassify <- iaa_genus %>%
filter(Genus %notin% iaa_taxonomy_K21801$Genus)
