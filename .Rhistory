TL_tree$node.label <- replace_na(TL_tree$node.label, replace = "")
par(oma = c(1,0,0,1))
plot.phylo(TL_tree,
align.tip.label = T,
no.margin = T,
font = 1,
cex = 0.6,
edge.width = 2,
show.node.label = T,
node.pos = 1,
label.offset = 0.005,
adj = 0)
add.scale.bar(x = 0.5, y = 0.5)
title("MAG Phylogeny\nfrom 49 COGs", adj = 0.1, line = -3)
text(x = 0.15, y = 1.5, label = "Archaea")
text(x = 0.15, y = 6.6, label = "Bacteria")
dev.off()
par(oma = c(1,0,0,1))
plot.phylo(TL_tree,
align.tip.label = T,
no.margin = T,
font = 1,
cex = 0.6,
edge.width = 2,
show.node.label = T,
node.pos = 1,
label.offset = 0.005,
adj = 0)
add.scale.bar(x = 0.5, y = 0.5)
text(x = 0.15, y = 1.5, label = "Archaea")
text(x = 0.15, y = 6.6, label = "Bacteria")
dev.off()
# Plot with ggtree
ggtree(TL_tree)
rlang::last_error()
rlang::last_trace()
devtools::install("dplyr", version = "1.0.5")
install_version("dplyr", version = "1.0.5", repos = "http://cran.us.r-project.org")
library(devtools)
install_version("dplyr", version = "1.0.5", repos = "http://cran.us.r-project.org")
library(ggplot2)
library(ggh4x)
library(scales)
viridis_pal()(4)
# Load DADA2 and required packages
library(dada2); packageVersion("dada2") # the dada2 pipeline
# Load DADA2 and required packages
library(dada2); packageVersion("dada2") # the dada2 pipeline
library(cowplot)
library(vegan)
library(ape)
x <- c(1,2,3,4,5,6,7,8,9,10)
Moran.I(x)
tr <- rtree(30)
x <- rnorm(30)
## weights w[i,j] = 1/d[i,j]:
w <- 1/cophenetic(tr)
## set the diagonal w[i,i] = 0 (instead of Inf...):
diag(w) <- 0
Moran.I(x, w)
w
library(nlme)
### ** Examples
sp1 <- corExp(form = ~ x + y + z)
# Pinheiro and Bates, p. 238
spatDat <- data.frame(x = (0:4)/4, y = (0:4)/4)
cs1Exp <- corExp(1, form = ~ x + y)
cs1Exp <- Initialize(cs1Exp, spatDat)
corMatrix(cs1Exp)
View(spatDat)
sp1 <- corExp(form = ~ x + y + z)
# Pinheiro and Bates, p. 238
spatDat <- data.frame(x = (0:4)/4, y = (0:4)/4)
cs1Exp <- corExp(1, form = ~ x + y)
cs1Exp <- Initialize(cs1Exp, spatDat)
corMatrix(cs1Exp)
cs2Exp <- corExp(1, form = ~ x + y, metric = "man")
cs2Exp <- Initialize(cs2Exp, spatDat)
corMatrix(cs2Exp)
cs3Exp <- corExp(c(1, 0.2), form = ~ x + y,
nugget = TRUE)
cs3Exp <- Initialize(cs3Exp, spatDat)
corMatrix(cs3Exp)
# example lme(..., corExp ...)
# Pinheiro and Bates, pp. 222-247
# p. 222
options(contrasts = c("contr.treatment", "contr.poly"))
fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,
random = ~ Time)
# p. 223
fm2BW.lme <- update(fm1BW.lme, weights = varPower())
# p. 246
fm3BW.lme <- update(fm2BW.lme,
correlation = corExp(form = ~ Time))
# p. 247
fm4BW.lme <-
update(fm3BW.lme, correlation = corExp(form =  ~ Time,
nugget = TRUE))
anova(fm3BW.lme, fm4BW.lme)
# ITEX Transplants - Surival by Treatment analysis
# by Sarah Elmendorf and Cliff Bueno de Mesquita
# SCE 4/14/2022
#  updated 4/14/2023 to run using coxph instead of rstanarm
#  updated on 5/28/23 by CB to use continuous variables
#  updated on 9/7/23 by CB to test Des
# Setup -------------------------------------------------------------------
library(tidyverse)
library(coxme)
library(RColorBrewer)
df <- read.csv("data/itex_commtrans.ks.data.csv")
install.packages("ggpmisc")
library(ggpmisc)
install.packages("lavaan")
library(lavaan)
install.packages("psychTools")
library(psychTools)
install.packages("AICcmodavg")
install.packages("caret")
install.packages("ggdendro")
install.packages("DiagrammeR")
install.packages("semPlot")
d <- read.csv("~/Downloads/NWT Black Sand Root Microscopy - Sheet1.csv")
# NWT Black Sand Root Microscopy
library(tidyverse)
d <- read.csv("~/Downloads/NWT Black Sand Root Microscopy - Sheet1.csv") %>%
filter(Lost != "Lost")
View(d)
d <- read.csv("~/Downloads/NWT Black Sand Root Microscopy - Sheet1.csv") %>%
filter(Lost != "ost")
d <- read.csv("~/Downloads/NWT Black Sand Root Microscopy - Sheet1.csv") %>%
filter(Lost != "lost")
table(d$Species)
d <- read.csv("~/Downloads/NWT Black Sand Root Microscopy - Sheet1.csv") %>%
filter(Lost != "lost")
table(d$Species)
library(dada2); packageVersion("dada2") # the dada2 pipeline
library(ShortRead); packageVersion("ShortRead") # dada2 depends on this
library(dplyr); packageVersion("dplyr") # for manipulating data
library(tidyr); packageVersion("tidyr") # for creating the final graph at the end of the pipeline
library(Hmisc); packageVersion("Hmisc") # for creating the final graph at the end of the pipeline
library(ggplot2); packageVersion("ggplot2") # for creating the final graph at the end of the pipeline
library(plotly); packageVersion("plotly") # enables creation of interactive graphs
# Set up pathway to idemp (demultiplexing tool) and test - not needed for Novogene!
#idemp <- "/usr/bin/idemp" # CHANGE ME if not on microbe
#system2(idemp) # Check that idemp is in your path and you can run shell commands from R
# Set up pathway to cutadapt (primer trimming tool) and test - might be needed for Novogene!
cutadapt <- path.expand("~/miniconda3/envs/cutadaptenv/bin/cutadapt")
system2(cutadapt, args = "--version") # Check by running shell command from R
# Set path to data folder and contents
data.fp <- "~/Desktop/RNG/16S_Batch2/result_X202SC24010151-Z01-F001/01.RawData/"
# Note: move any other non-data files in the RawData folder elsewhere (e.g., into the report folder)
# List all files in shared folder to check path
list.files(data.fp)
# Set up file paths in YOUR directory where you want data;
# you do not need to create the subdirectories but they are nice to have
project.fp <- "~/Desktop/RNG/16S_Batch2" # CHANGE ME to project directory; don't append with a "/"
# Set up names of sub directories to stay organized
preprocess.fp <- file.path(project.fp, "01_preprocess")
demultiplex.fp <- file.path(preprocess.fp, "demultiplexed")
filtN.fp <- file.path(preprocess.fp, "filtN")
trimmed.fp <- file.path(preprocess.fp, "trimmed")
filter.fp <- file.path(project.fp, "02_filter")
table.fp <- file.path(project.fp, "03_tabletax")
# Read in RDS
st.all <- readRDS(paste0(table.fp, "/seqtab.rds"))
# Remove chimeras
seqtab.nochim <- removeBimeraDenovo(st.all, method="consensus", multithread=TRUE)
# Print percentage of our seqences that were not chimeric.
100*sum(seqtab.nochim)/sum(seqtab) # 97.91
# Print percentage of our seqences that were not chimeric.
seqtab <- readRDS(paste0(table.fp, "/seqtab.rds"))
100*sum(seqtab.nochim)/sum(seqtab) # 97.91
# Save
saveRDS(seqtab.nochim, paste0(table.fp, "/seqtab.nochim.rds"))
table.fp
saveRDS(seqtab.nochim, paste0(table.fp, "/seqtab_final.rds"))
#### _MERGE RUNS ####
# Need to merge Batch1 and Batch2 sequence tables
# Use "seqtab.nochim
st1 <- readRDS("~/Desktop/RNG/16S_Batch1/03_tabletax/seqtab_final.rds")
st2 <- readRDS("~/Desktop/RNG/16S_Batch2/03_tabletax/seqtab_final.rds")
dim(st1)
dim(st2)
seqtab.nochim <- mergeSequenceTables(st1, st2)
dim(seqtab.nochim)
# Flip table
seqtab.t <- as.data.frame(t(seqtab.nochim))
# Pull out ASV repset
rep_set_ASVs <- as.data.frame(rownames(seqtab.t))
rep_set_ASVs <- mutate(rep_set_ASVs, ASV_ID = 1:n())
rep_set_ASVs$ASV_ID <- sub("^", "ASV_", rep_set_ASVs$ASV_ID)
rep_set_ASVs$ASV <- rep_set_ASVs$`rownames(seqtab.t)`
rep_set_ASVs$`rownames(seqtab.t)` <- NULL
# Add ASV numbers to table
rownames(seqtab.t) <- rep_set_ASVs$ASV_ID
# Write repset to fasta file
# create a function that writes fasta sequences
writeRepSetFasta<-function(data, filename){
fastaLines = c()
for (rowNum in 1:nrow(data)){
fastaLines = c(fastaLines, as.character(paste(">", data[rowNum,"name"], sep = "")))
fastaLines = c(fastaLines,as.character(data[rowNum,"seq"]))
}
fileConn<-file(filename)
writeLines(fastaLines, fileConn)
close(fileConn)
}
# Also need to merge taxonomy tables accordingly
# Can do by matching ASV sequence in merged tables to each taxonomy table
tax1 <- readRDS("~/Desktop/RNG/16S_Batch1/03_tabletax/tax_final.rds")
tax2 <- readRDS("~/Desktop/RNG/16S_Batch2/03_tabletax/tax_final.rds")
View(tax2)
library(tibble)
# Also need to merge taxonomy tables accordingly
# Can do by matching ASV sequence in merged tables to each taxonomy table
tax1 <- readRDS("~/Desktop/RNG/16S_Batch1/03_tabletax/tax_final.rds") %>%
rownames_to_column(var = "ASV")
# Also need to merge taxonomy tables accordingly
# Can do by matching ASV sequence in merged tables to each taxonomy table
tax1 <- readRDS("~/Desktop/RNG/16S_Batch1/03_tabletax/tax_final.rds") %>%
as.data.frame() %>%
rownames_to_column(var = "ASV")
tax2 <- readRDS("~/Desktop/RNG/16S_Batch2/03_tabletax/tax_final.rds") %>%
as.data.frame() %>%
rownames_to_column(var = "ASV")
tax <- rbind(tax1, tax2) %>%
distinct(ASV) %>%
column_to_rownames(var = "ASV")
tax <- rbind(tax1, tax2) %>%
distinct(ASV) %>%
column_to_rownames(var = "ASV") %>%
as.matrix()
nrow(tax)
dim(seqtab.nochim) # 118 samples, 106442 ASVs
# Add ASV numbers to taxonomy
taxonomy <- as.data.frame(tax)
taxonomy$ASV <- as.factor(rownames(taxonomy))
taxonomy <- merge(rep_set_ASVs, taxonomy, by = "ASV")
rownames(taxonomy) <- taxonomy$ASV_ID
taxonomy_for_mctoolsr <- unite_(taxonomy, "taxonomy",
c("Kingdom", "Phylum", "Class", "Order","Family",
"Genus", "Species", "ASV_ID"),
sep = ";")
View(taxonomy)
# Add ASV numbers to taxonomy
taxonomy <- as.data.frame(tax)
View(tax)
rm(taxonomy)
View(tax)
tax <- rbind(tax1, tax2) %>%
distinct(ASV) %>%
column_to_rownames(var = "ASV")
nrow(tax) # 106442
# Add ASV numbers to taxonomy
#taxonomy <- as.data.frame(tax)
taxonomy$ASV <- as.factor(rownames(taxonomy))
# Add ASV numbers to taxonomy
taxonomy <- as.data.frame(tax)
tax <- rbind(tax1, tax2) %>%
distinct(ASV) %>%
column_to_rownames(var = "ASV")
View(tax)
tax <- rbind(tax1, tax2)
tax <- rbind(tax1, tax2) %>%
distinct(ASV)
View(tax)
tax <- rbind(tax1, tax2) %>%
distinct(ASV, .keep_all = TRUE) %>%
column_to_rownames(var = "ASV")
View(tax)
nrow(tax) # 106442
# Add ASV numbers to taxonomy
taxonomy <- as.data.frame(tax)
taxonomy$ASV <- as.factor(rownames(taxonomy))
taxonomy <- merge(rep_set_ASVs, taxonomy, by = "ASV")
rownames(taxonomy) <- taxonomy$ASV_ID
taxonomy_for_mctoolsr <- unite_(taxonomy, "taxonomy",
c("Kingdom", "Phylum", "Class", "Order","Family",
"Genus", "Species", "ASV_ID"),
sep = ";")
# Arrange the taxonomy dataframe for the writeRepSetFasta function
taxonomy_for_fasta <- taxonomy %>%
unite("TaxString", c("Kingdom", "Phylum", "Class", "Order","Family",
"Genus", "Species", "ASV_ID"),
sep = ";", remove = FALSE) %>%
unite("name", c("ASV_ID", "TaxString"),
sep = " ", remove = TRUE) %>%
select(ASV, name) %>%
rename(seq = ASV)
# write fasta file
writeRepSetFasta(taxonomy_for_fasta, paste0(table.fp, "/repset.fasta"))
# Merge taxonomy and table
seqtab_wTax <- merge(seqtab.t, taxonomy_for_mctoolsr, by = 0)
seqtab_wTax$ASV <- NULL
# Set name of table in mctoolsr format and save
out_fp <- paste0(table.fp, "/seqtab_wTax_mctoolsr.txt")
names(seqtab_wTax)[1] = "#ASV_ID"
write("#Exported for mctoolsr", out_fp)
suppressWarnings(write.table(seqtab_wTax, out_fp, sep = "\t", row.names = FALSE, append = TRUE))
# Also export files as .txt
write.table(seqtab.t, file = paste0(table.fp, "/seqtab_final.txt"),
sep = "\t", row.names = TRUE, col.names = NA)
write.table(tax, file = paste0(table.fp, "/tax_final.txt"),
sep = "\t", row.names = TRUE, col.names = NA)
getN <- function(x) sum(getUniques(x)) # function to grab sequence counts from output objects
# tracking reads by counts
filt_out_track <- filt_out %>%
data.frame() %>%
mutate(Sample = gsub(".raw_1.fastq.gz", "", rownames(.))) %>%
rename(input = reads.in, filtered = reads.out)
library(readxl)
library(tidyverse)
#### MDS CH4 ####
rgf <- (read_xlsx("~/Desktop/RNG/US-RGF_all/US-RGF Master GF_03122024.xlsx",
na = c("NaN", "NA", -9999))[-c(1,2),])
cor.test(rgf$FCH4_1_1_1, rgf$FCH4_MDS_F_1_1_1)
#### MDS CH4 ####
rgf <- (read_xlsx("~/Desktop/RNG/US-RGF_all/US-RGF Master GF_03122024.xlsx",
na = c("NaN", "NA", -9999))[-c(1,2),]) %>%
mutate_if(is.character, as.numeric)
cor.test(rgf$FCH4_1_1_1, rgf$FCH4_MDS_F_1_1_1)
summary(lm(FCH4_1_1_1 ~ FCH4_MDS_F_1_1_1, data = rgf)) # 0.
#### MDS N2O ####
cor.test(rgf$FN2O_1_1_1, rgf$FN2O_MDS_F_1_1_1) # r = 0.95
summary(lm(FN2O_1_1_1 ~ FN2O_MDS_F_1_1_1, data = rgf)) # 0.9
plot(rgf$FN2O_1_1_1, rgf$FN2O_MDS_F_1_1_1)
head(rgf$FN2O_1_1_1)
head(rgf$FN2O_MDS_F_1_1_1)
sum(rgf$FN2O_1_1_1 == rgf$FN2O_MDS_F_1_1_1)
sum(rgf$FN2O_1_1_1 == rgf$FN2O_MDS_F_1_1_1, na.rm = T)
library(installr)
updateR()
install.packages("updater")
library(updater)
updater::previous_r_version()
updater::r_version()
updater::find_previous_library_location()
devtools::install_github("AndreaCirilloAC/updateR")
library(updateR)
updateR()
updateR()
updateR(admin_password = "#1Temporary")
library(updateR)
updateR()
updateR()
updateR()
updateR()
citation("mctoolsr")
citation("Compositions")
citation("compositions")
citation("vegan")
citation("pheatmap")
citation("mctoolsr")
citation("vegan")
library(vegan)
data("dune")
data("dune.env")
View(dune)
library(edgeR)
library(MASS)
citation("edgeR")
citation("MASS")
library(mctoolsr)
tax_table_fp <- "~/Desktop/ESV_16S_Fall23_biomformat_for_mctoolsr.txt"
map_fp <- "~/Desktop/16S_map_file_Fall2023.txt"
input = load_taxa_table(tax_table_fp, map_fp)
tax_table_fp <- "~/Desktop/ESV_16S_Fall23_biomformat_for_mctoolsr.txt"
map_fp <- "~/Desktop/16S_map_file_Fall2023.txt"
input = load_taxa_table(tax_table_fp, map_fp)
tax <- read.delim("~/Desktop/ESV_16S_Fall23_biomformat_for_mctoolsr.txt")
map <- read.delim("~/Desktop/16S_map_file_Fall2023.txt")
sum(map$SampleID %in% names(tax))
sum(names(tax) %in% map$SampleID)
tax_table_fp <- "~/Desktop/ESV_16S_Fall23_biomformat_for_mctoolsr.txt"
map_fp <- "~/Desktop/16S_map_file_Fall2023.txt"
input = load_taxa_table(tax_table_fp, map_fp)
library(dada2)
package_version("dada2")
package_version(dada2)
packageVersion("dada2")
install.packages("neonUtilities")
library(neonUtilities)
library(plyr) # For data manipulation
library(tidyverse) # For data manipulation
library(mctoolsr) # For microbial analyses
library(vegan) # For multivariate stats
library(RColorBrewer) # For colors
library(microseq) # For fastas
library(car) # For stats
library(MASS) # For stats
library(FSA) # For SE
library(lme4) # For LMER
library(emmeans) # For TukeyHSD
library(multcomp) # For cld
library(lmerTest) # For Sattherwaite df
library(afex) # For alternative mixed model
library(ggh4x) # For plots
library(ggrepel) # For plot text
library(cowplot) # For multipanel
library(phyloseq) # For networks
library(SpiecEasi) # For networks
library(igraph) # For networks
library(rnetcarto) # For networks
library(writexl) # Export
library(naniar) # For NA management
library(pheatmap) # For heatmaps
library(iCAMP) # NTI
library(ape) # Phylogenetics
library(phyloseq) # microbial analyses, can handle trees
library(picante) # Trees
# Repo Directory
setwd("~/Documents/GitHub/SunflowerG/")
# Functions
`%notin%` <- Negate(`%in%`)
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
source("code/effectSize.R")
source("code/run_taxa_null_model.R")
source("code/run_div_null_model.R")
source("code/run_sclero_regressions.R")
MyDiamond <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.frame.color <- params("vertex", "frame.color")
if (length(vertex.frame.color) != 1 && !is.null(v)) {
vertex.frame.color <- vertex.frame.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color, fg=vertex.frame.color,
stars=cbind(vertex.size, vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("diamond", clip=shapes("circle")$clip,
plot=MyDiamond, parameters=list(vertex.frame.color="white",
vertex.frame.width=1))
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("triangle", clip=shapes("circle")$clip,
plot=mytriangle)
input_n3_16S <- readRDS("data/input_filt_16S_noSing.rds")
input_n3_ITS <- readRDS("data/input_filt_ITS_noSing.rds")
input_n3_16S$map_loaded$rich <- specnumber(input_n3_16S$data_loaded,
MARGIN = 2)
input_n3_16S$map_loaded$shannon <- vegan::diversity(input_n3_16S$data_loaded,
index = "shannon",
MARGIN = 2)
input_n3_ITS$map_loaded$rich <- specnumber(input_n3_ITS$data_loaded,
MARGIN = 2)
input_n3_ITS$map_loaded$shannon <- vegan::diversity(input_n3_ITS$data_loaded,
index = "shannon",
MARGIN = 2)
#### 9. NTI ####
# Look at Nearest Taxon Index to infer assembly mechanisms
# Just do for 16S as ITS trees are questionable
# Hypothesis that genotype effects lead to deterministic assembly
# Read in and filter repset fasta
nrow(input_n3_16S$taxonomy_loaded)
cs15 <- as.data.frame(rowSums(input_n3_16S$data_loaded)) %>%
set_names("Reads") %>%
filter(Reads >= 15)
input_15 <- filter_taxa_from_input(input_n3_16S,
taxa_IDs_to_keep = rownames(cs15))
nrow(input_15$taxonomy_loaded) # 10522
#saveRDS(NTI, "NTI.rds")
NTI <- readRDS("data/NTI.rds") %>%
rownames_to_column(var = "sampleID")
hist(NTI$NTI)
input_15$map_loaded <- input_15$map_loaded %>%
left_join(., NTI, by = "sampleID")
rownames(input_n3_16S$map_loaded)
rownames(input_15$map_loaded) <- input_15$map_loaded$sampleID
# Plot versus Sclerotinia and chlorophyll
plot(input_15$map_loaded$DiseaseIncidence, input_15$map_loaded$NTI)
plot(input_15$map_loaded$`Chlorophyll concentration`, input_15$map_loaded$NTI)
ggplot(input_15$map_loaded, aes(DiseaseIncidence, NTI)) +
geom_point() +
geom_line(method = "lm")
ggplot(input_15$map_loaded, aes(DiseaseIncidence, NTI)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw()
ggplot(input_15$map_loaded, aes(`Chlorophyll concentration`, NTI)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw()
pdf("InitialFigs/NTI_Sclero.pdf", width = 7 , height = 5)
ggplot(input_15$map_loaded, aes(DiseaseIncidence, NTI)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw()
dev.off()
pdf("InitialFigs/NTI_Chloro.pdf", width = 7 , height = 5)
ggplot(input_15$map_loaded, aes(`Chlorophyll concentration`, NTI)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw()
dev.off()
