"Axis02" = input_n3_16S$map_loaded$Axis02)
vare.wa <- wascores(vare.points, t(input_n3_16S$data_loaded))
# wascores
au_16S <- tax_sum_asv_16S %>%
filter(rownames(.) %in% input_au_16S$taxonomy_loaded$taxonomy8)
View(au_16S)
vare.wa.top <- as.data.frame(vare.wa)
View(vare.wa.top)
rep("top", 10)
vare.wa.top <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10)))
View(vare.wa.top)
vare.wa.top <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top")
View(vare.wa.top)
vare.wa.top <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
left_join(., input_au_16S$taxonomy_loaded, by = c(rownames(.) = "taxonomy8"))
vare.wa.top <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
left_join(., input_au_16S$taxonomy_loaded, by = c(rownames(.) == "taxonomy8"))
View(vare.wa.top)
vare.wa.top <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
rownames_to_column(var = "OTU") %>%
left_join(., input_au_16S$taxonomy_loaded, by = c("OTU" == "taxonomy8"))
vare.wa.top <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
rownames_to_column(var = "OTU") %>%
left_join(., input_au_16S$taxonomy_loaded, by = c("OTU" = "taxonomy8"))
View(vare.wa.top)
View(vare.wa.top)
vare.wa.top <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
rownames_to_column(var = "OTU") %>%
left_join(., input_au_16S$taxonomy_loaded, by = c("OTU" = "taxonomy8")) %>%
mutate(tax = paste(taxonomy4, OTU, sep = "_"))
g4_wa <- ggplot(input_n3_16S$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_16S,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_16S,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text(data = vare.wa.top,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold") +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_16S,
y = pcoaA2_16S) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g4_wa
g4_wa <- ggplot(input_n3_16S$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_16S,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_16S,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold") +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_16S,
y = pcoaA2_16S) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g4_wa
g4_wa <- ggplot(input_n3_16S$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_16S,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_16S,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold", max.overlaps = 10) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_16S,
y = pcoaA2_16S) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g4_wa
g4_wa <- ggplot(input_n3_16S$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_16S,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_16S,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_16S,
y = pcoaA2_16S) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g4_wa
#### _ITS ####
bc_ITS <- calc_dm(input_n3_ITS$data_loaded)
# PCoA
pcoa_ITS <- cmdscale(bc_ITS, k = nrow(input_n3_ITS$map_loaded) - 1, eig = T)
env_ITS <- input_n3_ITS$map_loaded %>%
dplyr::select(`Chlorophyll concentration`, rich, DiseaseIncidence)
set.seed(100)
ef_ITS <- envfit(pcoa_ITS, env_ITS, permutations = 999, na.rm = TRUE)
ef_ITS # Chloro and rich sig. Sclero not.
ordiplot(pcoa_ITS)
plot(ef_ITS, p.max = 0.05, cex = 0.5)
multiplier_ITS <- ordiArrowMul(ef_ITS)
vec.df_ITS <- as.data.frame(ef_ITS$vectors$arrows*sqrt(ef_ITS$vectors$r)) %>%
mutate(Dim1 = Dim1 * multiplier_ITS,
Dim2 = Dim2 * multiplier_ITS) %>%
mutate(variables = rownames(.)) %>%
filter(ef_ITS$vectors$pvals < 0.05) %>%
mutate(shortnames = c("Chlorophyll", "Richness"))
pcoaA1_ITS <- paste("PC1: ", round((eigenvals(pcoa_ITS)/sum(eigenvals(pcoa_ITS)))[1]*100, 1), "%")
pcoaA2_ITS <- paste("PC2: ", round((eigenvals(pcoa_ITS)/sum(eigenvals(pcoa_ITS)))[2]*100, 1), "%")
input_n3_ITS$map_loaded$Axis01 <- vegan::scores(pcoa_ITS)[,1]
input_n3_ITS$map_loaded$Axis02 <- vegan::scores(pcoa_ITS)[,2]
micro.hulls_ITS <- ddply(input_n3_ITS$map_loaded, c("rep"), find_hull) # No effect, don't show
g5 <- ggplot(input_n3_ITS$map_loaded, aes(Axis01, Axis02)) +
# geom_polygon(data = micro.hulls_ITS,
#              aes(colour = rep),
#              alpha = 0.1, show.legend = F) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_ITS,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_ITS,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text(aes(x = 0.15, y = -0.21, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_ITS,
y = pcoaA2_ITS) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g5
# wascores
au_ITS <- tax_sum_asv_ITS %>%
filter(rownames(.) %in% input_au_ITS$taxonomy_loaded$taxonomy8)
vare.points_ITS <- data.frame("Axis01" = input_n3_ITS$map_loaded$Axis01,
"Axis02" = input_n3_ITS$map_loaded$Axis02)
vare.wa_ITS <- wascores(vare.points_ITS, t(input_n3_ITS$data_loaded))
vare.wa.top_ITS <- as.data.frame(vare.wa) %>%
filter(rownames(.) %in% rownames(au_ITS)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
rownames_to_column(var = "OTU") %>%
left_join(., input_au_ITS$taxonomy_loaded, by = c("OTU" = "taxonomy8")) %>%
mutate(tax = paste(taxonomy4, OTU, sep = "_"))
g5_wa <- ggplot(input_n3_ITS$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_ITS,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_ITS,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_ITS,
y = pcoaA2_ITS) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g5_wa
g5_wa <- ggplot(input_n3_ITS$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_ITS,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_ITS,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top_ITS,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_ITS,
y = pcoaA2_ITS) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g5_wa
vare.wa.top_ITS <- as.data.frame(vare.wa_ITS) %>%
filter(rownames(.) %in% rownames(au_ITS)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
rownames_to_column(var = "OTU") %>%
left_join(., input_au_ITS$taxonomy_loaded, by = c("OTU" = "taxonomy8")) %>%
mutate(tax = paste(taxonomy4, OTU, sep = "_"))
g5_wa <- ggplot(input_n3_ITS$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_ITS,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_ITS,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top_ITS,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_ITS,
y = pcoaA2_ITS) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g5_wa
input_au_ITS$taxonomy_loaded <- input_au_ITS$taxonomy_loaded %>%
mutate(taxonomy1 = gsub("k__", "", taxonomy1),
taxonomy2 = gsub("p__", "", taxonomy2),
taxonomy3 = gsub("c__", "", taxonomy3),
taxonomy4 = gsub("o__", "", taxonomy4),
taxonomy5 = gsub("f__", "", taxonomy5),
taxonomy6 = gsub("g__", "", taxonomy6),
taxonomy7 = gsub("s__", "", taxonomy7))
vare.wa.top_ITS <- as.data.frame(vare.wa_ITS) %>%
filter(rownames(.) %in% rownames(au_ITS)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
rownames_to_column(var = "OTU") %>%
left_join(., input_au_ITS$taxonomy_loaded, by = c("OTU" = "taxonomy8")) %>%
mutate(tax = paste(taxonomy4, OTU, sep = "_"))
g5_wa <- ggplot(input_n3_ITS$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_ITS,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_ITS,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top_ITS,
aes(x = Axis01, y = Axis02, label = tax),
size = 3, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_ITS,
y = pcoaA2_ITS) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g5_wa
g4_wa <- g4_wa +
ggtitle("a) Archaea/Bacteria") +
theme(plot.title = element_text(size = 12, hjust = 0.5, vjust = -1))
g5_wa <- g5_wa +
ggtitle("b) Fungi") +
theme(plot.title = element_text(size = 12, hjust = 0.5, vjust = -1))
pdf("InitialFigs/Beta_Bray_Combined_wascores.pdf", width = 8, height = 4)
plot_grid(g4_wa, g5_wa, ncol = 2)
dev.off()
pdf("InitialFigs/Beta_Bray_Combined_wascores.pdf", width = 10, height = 6)
plot_grid(g4_wa, g5_wa, ncol = 2)
dev.off()
vare.points_16S <- data.frame("Axis01" = input_n3_16S$map_loaded$Axis01,
"Axis02" = input_n3_16S$map_loaded$Axis02)
vare.wa_16S <- wascores(vare.points_16S, t(input_n3_16S$data_loaded))
vare.wa.top_16S <- as.data.frame(vare.wa_16S) %>%
filter(rownames(.) %in% rownames(au_16S)) %>%
mutate(PC1_abs = abs(Axis01),
PC2_abs = abs(Axis02)) %>%
arrange(desc(PC1_abs)) %>%
mutate(PC1_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
arrange(desc(PC2_abs)) %>%
mutate(PC2_top = c(rep("top", 10), rep("rest", nrow(.)-10))) %>%
filter(PC1_top == "top" | PC2_top == "top") %>%
rownames_to_column(var = "OTU") %>%
left_join(., input_au_16S$taxonomy_loaded, by = c("OTU" = "taxonomy8")) %>%
mutate(tax = paste(taxonomy4, OTU, sep = "_"))
g4_wa <- ggplot(input_n3_16S$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_16S,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_16S,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top_16S,
aes(x = Axis01, y = Axis02, label = tax),
size = 2, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_16S,
y = pcoaA2_16S) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g4_wa
g5_wa <- ggplot(input_n3_ITS$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_ITS,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_ITS,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top_ITS,
aes(x = Axis01, y = Axis02, label = tax),
size = 2, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.35, y = -0.175, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_ITS,
y = pcoaA2_ITS) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g5_wa
g5_wa <- ggplot(input_n3_ITS$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.25) +
geom_segment(data = vec.df_ITS,
aes(x = 0, xend = Dim1, y = 0, yend = Dim2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_ITS,
aes(x = Dim1, y = Dim2, label = shortnames),
size = 4, color = "red", fontface = "bold") +
geom_text_repel(data = vare.wa.top_ITS,
aes(x = Axis01, y = Axis02, label = tax),
size = 2, color = "blue", fontface = "bold", max.overlaps = 15) +
geom_text(aes(x = 0.15, y = -0.21, label = "p = 0.001\nH = 0.34"), check_overlap = T) +
labs(x = pcoaA1_ITS,
y = pcoaA2_ITS) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g5_wa
g4_wa <- g4_wa +
ggtitle("a) Archaea/Bacteria") +
theme(plot.title = element_text(size = 12, hjust = 0.5, vjust = -1))
g5_wa <- g5_wa +
ggtitle("b) Fungi") +
theme(plot.title = element_text(size = 12, hjust = 0.5, vjust = -1))
pdf("InitialFigs/Beta_Bray_Combined_wascores.pdf", width = 10, height = 6)
plot_grid(g4_wa, g5_wa, ncol = 2)
dev.off()
library(plyr) # Data manipulation
library(tidyverse) # Data manipulation
library(mctoolsr) # Microbial analyses
library(vegan) # Multivariate stats
library(RColorBrewer) # Colors
library(microseq) # for fastas
library(car) # stats
library(MASS) # stats
library(FSA) # se
library(lme4) # LMER
library(emmeans) # TukeyHSD
library(multcomp) # cld
library(lmerTest) # For Sattherwaite df
library(afex) # For alternative mixed model
library(ggh4x) # For plots
library(ggrepel) # For plot text
library(cowplot) # For multipanel
library(phyloseq) # For networks
library(SpiecEasi) # For networks
library(igraph) # For networks
library(rnetcarto) # For networks
library(writexl) # Export
# Repo Directory
setwd("~/Documents/GitHub/SunflowerG/")
# Functions
`%notin%` <- Negate(`%in%`)
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
source("code/effectSize.R")
source("code/run_taxa_null_model.R")
source("code/run_div_null_model.R")
source("code/run_sclero_regressions.R")
MyDiamond <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.frame.color <- params("vertex", "frame.color")
if (length(vertex.frame.color) != 1 && !is.null(v)) {
vertex.frame.color <- vertex.frame.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color, fg=vertex.frame.color,
stars=cbind(vertex.size, vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("diamond", clip=shapes("circle")$clip,
plot=MyDiamond, parameters=list(vertex.frame.color="white",
vertex.frame.width=1))
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("triangle", clip=shapes("circle")$clip,
plot=mytriangle)
#### _Start Here ####
input_filt_16S <- readRDS("data/input_filt_16S.rds")
