axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
f <- read_xlsx("~/Desktop/Rumen/RuminantNumbers.xlsx", sheet = 5) %>%
filter(Food != "Beef optimal")
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
png("~/Desktop/Rumen/Figure1_noOpt.png", width = 5, height = 5, units = "in", res = 300)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
library(readxl)
library(tidyverse)
library(janitor)
f <- read_xlsx("~/Desktop/Rumen/RuminantNumbers.xlsx", sheet = 5)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0) +
scale_colour_manual(values = c("#228833", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833",
"#EE6677", "#EE6677", "#EE6677")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt, fill = Food)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0) +
scale_colour_manual(values = c("#228833", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833",
"#EE6677", "#EE6677", "#EE6677")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
png("~/Desktop/Rumen/Figure1.png", width = 5, height = 5, units = "in", res = 300)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt, colour = Food)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0) +
scale_colour_manual(values = c("#228833", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833",
"#EE6677", "#EE6677", "#EE6677")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt, colour = Food)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0) +
scale_colour_manual(values = c("#228833", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833",
"#EE6677", "#EE6677", "#EE6677")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0,
aes(colour = Food)) +
scale_colour_manual(values = c("#228833", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833",
"#EE6677", "#EE6677", "#EE6677")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0,
aes(colour = Food)) +
scale_colour_manual(values = c("#EE6677", "#EE6677", "#EE6677",
"#228833", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0,
aes(colour = Food)) +
scale_colour_manual(values = c("#EE6677", "#EE6677", "#228833",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0,
aes(colour = Food)) +
scale_colour_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0,
aes(colour = Food)) +
scale_colour_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
png("~/Desktop/Rumen/Figure1.png", width = 5, height = 5, units = "in", res = 300)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 16, alpha = 0.5, width = 0.25, height = 0,
aes(colour = Food)) +
scale_colour_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, alpha = 0.5, width = 0.25, height = 0,
aes(colour = Food)) +
scale_colour_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, alpha = 0.5, width = 0.25, height = 0,
aes(fill = Food)) +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 0.5, width = 0.25, height = 0,
aes(fill = Food)) +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 1, width = 0.25, height = 0,
aes(fill = Food)) +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 1, width = 0.25, height = 0,
aes(fill = Food), colour = "white") +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
png("~/Desktop/Rumen/Figure1.png", width = 5, height = 5, units = "in", res = 300)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 1, width = 0.25, height = 0,
aes(fill = Food), colour = "white") +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 1, width = 0.25, height = 0,
aes(fill = Food), colour = "black") +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
png("~/Desktop/Rumen/Figure1.png", width = 5, height = 5, units = "in", res = 300)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 1, width = 0.25, height = 0,
aes(fill = Food), colour = "black") +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
library(readxl)
library(tidyverse)
library(janitor)
# Plot with Paul Tol colorblind friendly palette
f <- read_xlsx("~/Desktop/Rumen/RuminantNumbers.xlsx", sheet = 5)
pdf("~/Desktop/Rumen/Figure1_noicon.pdf", width = 5, height = 5)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 1, width = 0.25, height = 0,
aes(fill = Food), colour = "black") +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
pdf("~/Desktop/Rumen/Figure1_noicon.pdf", width = 5, height = 4)
ggplot(f, aes(reorder(Food, CO2eq_100gProt, mean), CO2eq_100gProt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, pch = 21, alpha = 1, width = 0.25, height = 0,
aes(fill = Food), colour = "black") +
scale_fill_manual(values = c("#228833", "#EE6677", "#EE6677",
"#EE6677", "#228833", "#228833", "#228833",
"#228833", "#228833", "#228833")) +
labs(y = expression("kg "*CO[2]*" eq. / 100 g protein")) +
scale_y_continuous(expand = c(0.02,0.01)) +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
dev.off()
library(plyr) # For data manipulation
library(tidyverse) # For data manipulation
library(mctoolsr) # For microbial analyses
library(vegan) # For multivariate stats
library(RColorBrewer) # For colors
library(microseq) # For fastas
library(car) # For stats
library(MASS) # For stats
library(FSA) # For SE
library(lme4) # For LMER
library(emmeans) # For TukeyHSD
library(multcomp) # For cld
library(lmerTest) # For Sattherwaite df
library(afex) # For alternative mixed model
library(ggh4x) # For plots
library(ggrepel) # For plot text
library(cowplot) # For multipanel
library(phyloseq) # For networks
library(SpiecEasi) # For networks
library(igraph) # For networks
library(rnetcarto) # For networks
library(writexl) # Export
library(naniar) # For NA management
library(pheatmap) # For heatmaps
library(iCAMP) # NTI
library(ape) # Phylogenetics
library(phyloseq) # microbial analyses, can handle trees
library(picante) # Trees
library(conditionz)
library(taxize) # version 0.9.100.1 from archive
# Repo Directory
setwd("~/Documents/GitHub/SunflowerG/")
# Functions
`%notin%` <- Negate(`%in%`)
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
source("code/effectSize.R")
source("code/run_taxa_null_model.R")
source("code/run_div_null_model.R")
source("code/run_sclero_regressions.R")
MyDiamond <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.frame.color <- params("vertex", "frame.color")
if (length(vertex.frame.color) != 1 && !is.null(v)) {
vertex.frame.color <- vertex.frame.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color, fg=vertex.frame.color,
stars=cbind(vertex.size, vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("diamond", clip=shapes("circle")$clip,
plot=MyDiamond, parameters=list(vertex.frame.color="white",
vertex.frame.width=1))
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("triangle", clip=shapes("circle")$clip,
plot=mytriangle)
#### _Start here ####
input_n3_16S <- readRDS("data/input_filt_16S_noSing.rds")
input_n3_ITS <- readRDS("data/input_filt_ITS_noSing.rds")
input_n3_16S$map_loaded$rich <- specnumber(input_n3_16S$data_loaded,
MARGIN = 2)
input_n3_16S$map_loaded$shannon <- vegan::diversity(input_n3_16S$data_loaded,
index = "shannon",
MARGIN = 2)
input_n3_ITS$map_loaded$rich <- specnumber(input_n3_ITS$data_loaded,
MARGIN = 2)
input_n3_ITS$map_loaded$shannon <- vegan::diversity(input_n3_ITS$data_loaded,
index = "shannon",
MARGIN = 2)
#### 12. NCBI ####
# Submit ZOTU sequences to NCBI
# First need to take the repset fasta from Jason and subset it to the used ZOTUs
# Used ZOTU IDs are from the rarefied dataset with n = 368 samples
repset_16S <- microseq::readFasta("~/Desktop/Kane/Cloe/16S/16S_rep_set_zotus_filt_relabeled.fa")
repset_ITS <- microseq::readFasta("~/Desktop/Kane/Cloe/ITS/ITS_rep_set_zotus_filt_relabeled.fa")
View(repset_ITS)
#### 12. NCBI ####
# Submit ZOTU sequences to NCBI
# First need to take the repset fasta from Jason and subset it to the used ZOTUs
# Used ZOTU IDs are from the rarefied dataset with n = 368 samples
repset_16S <- microseq::readFasta("~/Desktop/Kane/Cloe/16S/16S_rep_set_zotus_filt_relabeled.fa") %>%
filter(Header %in% input_n3_16S$taxonomy_loaded$taxonomy8)
nrow(repset_16S) == nrow(input_n3_16S$taxonomy_loaded$taxonomy8)
nrow(repset_16S)
nrow(input_n3_16S$taxonomy_loaded$taxonomy8)
nrow(input_n3_16S$taxonomy_loaded)
nrow(repset_16S) == nrow(input_n3_16S$taxonomy_loaded)
repset_ITS <- microseq::readFasta("~/Desktop/Kane/Cloe/ITS/ITS_rep_set_zotus_filt_relabeled.fa") %>%
filter(Header %in% input_n3_ITS$taxonomy_loaded$taxonomy8)
nrow(repset_ITS) == nrow(input_n3_ITS$taxonomy_loaded)
microseq::writeFasta(repset_16S, "data/repset_16S.fasta")
microseq::writeFasta(repset_ITS, "data/repset_ITS.fasta")
input_n3_16S$map_loaded$sampleID
View(input_n3_16S$map_loaded$sampleID)
View(input_n3_16S$map_loaded)
View(input_n3_16S$map_loaded)
View(input_n3_16S$map_loaded)
write.csv(input_n3_16S$map_loaded$sampleID, "~/Desktop/sampleID.csv")
input_filt_16S <- readRDS("~/Documents/GitHub/Sunflower_AEM/data/input_filt_16S.rds")
View(input_filt_16S)
View(input_filt_16S$map_loaded)
rm(input_filt_16S)
# Now assign ASVs to samples (not comprehensive, just first sample)
info <- input_n3_16S$data_loaded
names(info) <- input_n3_16S$map_loaded$sampleID
for (i in 1:ncol(info)) {
for (j in 1:nrow(info)) {
ifelse(info[j, i] > 0, info[j, i] <- names(info)[i], info[j, i] <- "")
}
}
info_cat <- info
info_cat <- info_cat %>%
mutate_all(na_if, "") %>%
mutate(unite(., "sample_name", c(names(info)), sep = ", ")) %>%
mutate(sample_name = gsub("NA, ", "", sample_name)) %>%
mutate(sample_name = gsub(", NA", "", sample_name)) %>%
rownames_to_column(var = "Sequence_ID") %>%
dplyr::select(Sequence_ID, sample_name)
info_first <- info_cat %>%
separate(sample_name, into = c("sample_name", "Junk"), sep = ", ") %>%
dplyr::select(Sequence_ID, sample_name)
info_first <- info_first %>%
filter(Sequence_ID %in% repset_16S$Header)
View(info_first)
write_tsv(info_first, file = "data/biosample_assignment_16S.tsv")
info <- input_n3_ITS$data_loaded
names(info) <- input_n3_ITS$map_loaded$sampleID
for (i in 1:ncol(info)) {
for (j in 1:nrow(info)) {
ifelse(info[j, i] > 0, info[j, i] <- names(info)[i], info[j, i] <- "")
}
}
info_cat <- info
info_cat <- info_cat %>%
mutate_all(na_if, "") %>%
mutate(unite(., "sample_name", c(names(info)), sep = ", ")) %>%
mutate(sample_name = gsub("NA, ", "", sample_name)) %>%
mutate(sample_name = gsub(", NA", "", sample_name)) %>%
rownames_to_column(var = "Sequence_ID") %>%
dplyr::select(Sequence_ID, sample_name)
info_first <- info_cat %>%
separate(sample_name, into = c("sample_name", "Junk"), sep = ", ") %>%
dplyr::select(Sequence_ID, sample_name)
info_first <- info_first %>%
filter(Sequence_ID %in% repset_ITS$Header)
View(info_first)
write_tsv(info_first, file = "data/biosample_assignment_ITS.tsv")
