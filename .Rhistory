library(plyr) # For data manipulation
library(tidyverse) # For data manipulation
library(mctoolsr) # For microbial analyses
library(vegan) # For multivariate stats
library(RColorBrewer) # For colors
library(microseq) # For fastas
library(car) # For stats
library(MASS) # For stats
library(FSA) # For SE
library(lme4) # For LMER
library(emmeans) # For TukeyHSD
library(multcomp) # For cld
library(lmerTest) # For Sattherwaite df
library(afex) # For alternative mixed model
library(ggh4x) # For plots
library(ggrepel) # For plot text
library(cowplot) # For multipanel
library(phyloseq) # For networks
library(SpiecEasi) # For networks
library(igraph) # For networks
library(rnetcarto) # For networks
library(writexl) # Export
library(naniar) # For NA management
library(pheatmap) # For heatmaps
library(iCAMP) # NTI
library(ape) # Phylogenetics
library(phyloseq) # microbial analyses, can handle trees
library(picante) # Trees
library(conditionz)
library(taxize) # version 0.9.100.1 from archive
# Repo Directory
setwd("~/Documents/GitHub/SunflowerG/")
# Functions
`%notin%` <- Negate(`%in%`)
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
source("code/effectSize.R")
source("code/run_taxa_null_model.R")
source("code/run_div_null_model.R")
source("code/run_sclero_regressions.R")
MyDiamond <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.frame.color <- params("vertex", "frame.color")
if (length(vertex.frame.color) != 1 && !is.null(v)) {
vertex.frame.color <- vertex.frame.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color, fg=vertex.frame.color,
stars=cbind(vertex.size, vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("diamond", clip=shapes("circle")$clip,
plot=MyDiamond, parameters=list(vertex.frame.color="white",
vertex.frame.width=1))
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("triangle", clip=shapes("circle")$clip,
plot=mytriangle)
#### _Start here ####
input_n3_16S <- readRDS("data/input_filt_16S_noSing.rds")
input_n3_ITS <- readRDS("data/input_filt_ITS_noSing.rds")
input_n3_16S$map_loaded$rich <- specnumber(input_n3_16S$data_loaded,
MARGIN = 2)
input_n3_16S$map_loaded$shannon <- vegan::diversity(input_n3_16S$data_loaded,
index = "shannon",
MARGIN = 2)
input_n3_ITS$map_loaded$rich <- specnumber(input_n3_ITS$data_loaded,
MARGIN = 2)
input_n3_ITS$map_loaded$shannon <- vegan::diversity(input_n3_ITS$data_loaded,
index = "shannon",
MARGIN = 2)
# Save. Have handy for figure tweaking.
#saveRDS(results_comb_all, "data/results_comb_all.rds")
results_comb_all <- readRDS("data/results_comb_all.rds")
View(results_comb_all)
results_sum_all <- results_comb_all %>%
group_by(Dataset, Level) %>%
summarise(mean = mean(Heritability),
se = se(Heritability))
test_res <- as.data.frame(matrix(NA, nrow = length(levels(results_comb_all$Level)), ncol = 3)) %>%
set_names(c("Level", "t", "P"))
for (i in 1:6) {
test_res$Level[i] <- levels(results_comb_all$Level)[i]
t_df <- results_comb_all %>%
filter(Level == levels(results_comb_all$Level)[i])
m <- t.test(t_df$Heritability ~ t_df$Dataset)
test_res$t[i] <- m$statistic
test_res$P[i] <- m$p.value
}
View(test_res)
#### 2. Alpha ####
#### _16S ####
# Get descriptive info
min(input_n3_16S$map_loaded$rich) # 1676
max(input_n3_16S$map_loaded$rich) # 2463
mean(input_n3_16S$map_loaded$rich) # 2099.595
se(input_n3_16S$map_loaded$rich) # 7.217861
sd(input_n3_16S$map_loaded$rich) # 139
# Sclerotinia
m <- lm(DiseaseIncidence ~ rich, data = input_n3_16S$map_loaded)
summary(m) # NS
ggplot(input_n3_16S$map_loaded, aes(rich, DiseaseIncidence*100)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
labs(x = "ASV Richness",
y = "Sclerotinia % incidence") +
theme_bw()
m <- lm(DiseaseIncidence ~ shannon, data = input_n3_16S$map_loaded)
summary(m) # NS
ggplot(input_n3_16S$map_loaded, aes(shannon, DiseaseIncidence*100)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
labs(x = "Shannon diversity",
y = "Sclerotinia % incidence") +
theme_bw()
# Test and plot
leveneTest(input_n3_16S$map_loaded$rich ~ input_n3_16S$map_loaded$pedigree) # Not homogeneous
leveneTest(input_n3_16S$map_loaded$rich ~ input_n3_16S$map_loaded$rep) # Homogeneous
m <- lmer(rich ~ pedigree + (1|rep), data = input_n3_16S$map_loaded)
summary(m)
Anova(m)
anova(m)
aovtab <- anova(m)
mnull <- lmer(rich ~ 1 + (1|rep), data = input_n3_16S$map_loaded)
anova(mnull, m)
m2 <- mixed(rich ~ pedigree + (1|rep), data = input_n3_16S$map_loaded, method = "PB")
m2
anova(m2)
# No way to get all Sum of Squares for mixed model, so just use two way ANOVA
m <- aov(rich ~ rep + pedigree, data = input_n3_16S$map_loaded)
summary(m)
Anova(m, type = "II")
h <- eta_sq(m)[2]
h
hist(m$residuals)
shapiro.test(m$residuals)
plot(m$fitted.values, m$residuals)
TukeyHSD(m)
t <- emmeans(object = m, specs = "pedigree") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "rich",
y = max(input_n3_16S$map_loaded$rich)+
(max(input_n3_16S$map_loaded$rich)-
min(input_n3_16S$map_loaded$rich))/10,
#y = 5650,
Dataset = "16S")
leveneTest(input_n3_16S$map_loaded$shannon ~ input_n3_16S$map_loaded$pedigree) # Homogeneous
leveneTest(input_n3_16S$map_loaded$shannon ~ input_n3_16S$map_loaded$rep) # Homogeneous
m <- lmer(shannon ~ pedigree + (1|rep), data = input_n3_16S$map_loaded)
summary(m)
Anova(m)
anova(m)
mnull <- lmer(shannon ~ 1 + (1|rep), data = input_n3_16S$map_loaded)
anova(mnull, m)
m2 <- mixed(shannon ~ pedigree + (1|rep), data = input_n3_16S$map_loaded, method = "PB")
m2
anova(m2)
# No way to get all Sum of Squares for mixed model, so just use two va
m <- aov(shannon ~ rep + pedigree, data = input_n3_16S$map_loaded)
summary(m)
Anova(m, type = "II")
h1 <- eta_sq(m)[2]
h1
hist(m$residuals)
shapiro.test(m$residuals)
plot(m$fitted.values, m$residuals)
TukeyHSD(m)
t1 <- emmeans(object = m, specs = "pedigree") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "shannon",
y = max(input_n3_16S$map_loaded$shannon)+
(max(input_n3_16S$map_loaded$shannon)-
min(input_n3_16S$map_loaded$shannon))/10,
#y = 5650,
Dataset = "16S")
label_df_16S <- rbind(t, t1)
alpha_long_16S <- input_n3_16S$map_loaded %>%
pivot_longer(cols = c("rich", "shannon"))
facet_names <- c("rich" = "ASV Richness",
"shannon" = "Shannon Diversity")
h1
#### _ITS ####
# Get descriptive info
min(input_n3_ITS$map_loaded$rich) # 144
max(input_n3_ITS$map_loaded$rich) # 284
mean(input_n3_ITS$map_loaded$rich) # 219.5652
se(input_n3_ITS$map_loaded$rich) # 1.09572
sd(input_n3_ITS$map_loaded$rich) # 21
# Sclerotinia
m <- lm(DiseaseIncidence ~ rich, data = input_n3_ITS$map_loaded)
summary(m) # NS
ggplot(input_n3_ITS$map_loaded, aes(rich, DiseaseIncidence*100)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
labs(x = "ASV Richness",
y = "Sclerotinia % incidence") +
theme_bw()
m <- lm(DiseaseIncidence ~ shannon, data = input_n3_ITS$map_loaded)
summary(m) # NS
ggplot(input_n3_ITS$map_loaded, aes(shannon, DiseaseIncidence*100)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
labs(x = "Shannon diversity",
y = "Sclerotinia % incidence") +
theme_bw()
# Test and plot
leveneTest(input_n3_ITS$map_loaded$rich ~ input_n3_ITS$map_loaded$pedigree) # Not quite Homogeneous
leveneTest(input_n3_ITS$map_loaded$rich ~ input_n3_ITS$map_loaded$rep) # Homogeneous
m <- lmer(rich ~ pedigree + (1|rep), data = input_n3_ITS$map_loaded)
summary(m)
Anova(m)
anova(m)
aovtab <- anova(m)
mnull <- lmer(rich ~ 1 + (1|rep), data = input_n3_ITS$map_loaded)
anova(mnull, m)
m2 <- mixed(rich ~ pedigree + (1|rep), data = input_n3_ITS$map_loaded, method = "PB")
m2
anova(m2)
# No way to get all Sum of Squares for mixed model, so just use two-way ANOVA
m <- aov(rich ~ rep + pedigree, data = input_n3_ITS$map_loaded)
summary(m)
Anova(m, type = "II") # N.S.!
h2 <- eta_sq(m)[2]
h2
hist(m$residuals)
shapiro.test(m$residuals)
plot(m$fitted.values, m$residuals)
TukeyHSD(m)
t <- emmeans(object = m, specs = "pedigree") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "rich",
y = max(input_n3_ITS$map_loaded$rich)+
(max(input_n3_ITS$map_loaded$rich)-
min(input_n3_ITS$map_loaded$rich))/10,
#y = 5650,
Dataset = "ITS")
leveneTest(input_n3_ITS$map_loaded$shannon ~ input_n3_ITS$map_loaded$pedigree) # Homogeneous
leveneTest(input_n3_ITS$map_loaded$shannon ~ input_n3_ITS$map_loaded$rep) # Homogeneous
m <- lmer(shannon ~ pedigree + (1|rep), data = input_n3_ITS$map_loaded)
summary(m)
Anova(m)
anova(m)
mnull <- lmer(shannon ~ 1 + (1|rep), data = input_n3_ITS$map_loaded)
anova(mnull, m)
m2 <- mixed(shannon ~ pedigree + (1|rep), data = input_n3_ITS$map_loaded, method = "PB")
m2
anova(m2)
# No way to get all Sum of Squares for mixed model, so just use two-way ANOVA
m <- aov(shannon ~ rep + pedigree, data = input_n3_ITS$map_loaded)
summary(m)
Anova(m, type = "II") # Pedigree marginal
h3 <- eta_sq(m)[2]
h3
hist(m$residuals)
shapiro.test(m$residuals)
plot(m$fitted.values, m$residuals)
TukeyHSD(m)
t1 <- emmeans(object = m, specs = "pedigree") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "shannon",
y = max(input_n3_ITS$map_loaded$shannon)+
(max(input_n3_ITS$map_loaded$shannon)-
min(input_n3_ITS$map_loaded$shannon))/10,
#y = 5650,
Dataset = "ITS")
label_df_ITS <- rbind(t, t1)
alpha_long_ITS <- input_n3_ITS$map_loaded %>%
pivot_longer(cols = c("rich", "shannon"))
facet_names <- c("rich" = "ASV Richness",
"shannon" = "Shannon Diversity")
#### _Combined ####
alpha_long_16S <- alpha_long_16S %>%
mutate(Dataset = "16S") %>%
dplyr::select(pedigree, value, name, Dataset)
alpha_long_ITS <- alpha_long_ITS %>%
mutate(Dataset = "ITS") %>%
dplyr::select(pedigree, value, name, Dataset)
ped_order <- input_n3_16S$map_loaded %>%
group_by(pedigree) %>%
summarise(mean_asv_rich = mean(rich)) %>%
ungroup() %>%
arrange(mean_asv_rich)
alpha_long <- rbind(alpha_long_16S, alpha_long_ITS) %>%
mutate(pedigree = as.factor(pedigree)) %>%
droplevels() %>%
mutate(pedigree = factor(pedigree,
levels = ped_order$pedigree))
label_df_long <- rbind(label_df_16S, label_df_ITS)
# Don't show sig. letters. Just state heritability
label_df_long <- data.frame(x = c(75, 75, 75, 75),
y = c(1700, 6.6, 150, 2.25),
label = c("H = 0.42", "H = 0.38", "H = 0.26", "H = 0.31"),
plabel = c("p < 0.001", "p < 0.001", "N.S.D", "p < 0.1"),
px = c(41.5, 41.5, 41.5, 41.5),
py = c(2400, 7.3, 275, 4.25),
Dataset = c("16S", "16S", "ITS", "ITS"),
name = c("rich", "shannon", "rich", "shannon"))
facet_names <- c("rich" = "ZOTU Richness",
"shannon" = "Shannon Diversity",
"16S" = "a) Archaea/Bacteria",
"ITS" = "b) Fungi")
g3 <- ggplot(alpha_long, aes(pedigree, value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(size = 1, alpha = 1, pch = 16) +
geom_text(data = label_df_long, aes(x, y, label = label),
size = 4, color = "black") +
geom_text(data = label_df_long, aes(px, py, label = plabel),
size = 4, color = "black") +
labs(x = NULL, y = "ASV richness") +
facet_grid2(name ~ Dataset, scales = "free", independent = "y",
labeller = as_labeller(facet_names)) +
theme_bw() +
theme(legend.position = "right",
axis.title.y = element_blank(),
axis.title.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 3, angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 14),
strip.background = element_rect(fill = "white"),
panel.grid = element_blank())
g3
g3 <- ggplot(alpha_long, aes(pedigree, value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(size = 1, alpha = 1, pch = 16) +
geom_text(data = label_df_long, aes(x, y, label = label),
size = 4, color = "black") +
geom_text(data = label_df_long, aes(px, py, label = plabel),
size = 4, color = "black") +
labs(x = NULL, y = "ASV richness") +
facet_grid2(name ~ Dataset, scales = "free", independent = "y",
labeller = as_labeller(facet_names)) +
theme_bw() +
theme(legend.position = "right",
axis.title.y = element_blank(),
axis.title.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
#axis.text.x = element_text(size = 3, angle = 90, hjust = 1, vjust = 0.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(fill = "white"),
panel.grid = element_blank())
g3
pdf("InitialFigs/Alpha_Combined.pdf", width = 8, height = 6)
g3 <- ggplot(alpha_long, aes(pedigree, value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(size = 1, alpha = 1, pch = 16) +
geom_text(data = label_df_long, aes(x, y, label = label),
size = 4, color = "black") +
geom_text(data = label_df_long, aes(px, py, label = plabel),
size = 4, color = "black") +
labs(x = NULL, y = "ASV richness") +
facet_grid2(name ~ Dataset, scales = "free", independent = "y",
labeller = as_labeller(facet_names)) +
theme_bw() +
theme(legend.position = "right",
axis.title.y = element_blank(),
axis.title.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
#axis.text.x = element_text(size = 3, angle = 90, hjust = 1, vjust = 0.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(fill = "white"),
panel.grid = element_blank())
g3
dev.off()
pdf("FinalFigs/Figure1.pdf", width = 8, height = 6)
g3
dev.off()
