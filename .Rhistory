library(tidyverse)
library(ggside)
library(ozmaps)
library(sf)
library(scales)
library(arules)
library(vegan)
library(corrplot)
library(ggrepel)
library(mctoolsr)
library(FSA)
library(RColorBrewer)
library(broom)
library(readxl)
library(pheatmap)
library(writexl)
library(geosphere)
library(ComplexUpset)
library(UpSetR)
library(rcompanion)
# Functions
`%notin%` <- Negate(`%in%`)
source("~/Documents/GitHub/SunflowerGxE/code/cliffplot_taxa_bars.R")
# Working directory
setwd("~/Documents/GitHub/AussieStrains/")
d <- read.csv("data/metadata104.csv") %>%
dplyr::select(-X, -Prefix)
# Output just sampleID and coordinates
c <- d %>%
dplyr::select(sampleID, latitude, longitude)
#write.csv(c, "data/coords104.csv")
# Elevation, slope, aspect were missing, so conferred for all using DEM
#dem <- read.csv()
meta <- d %>%
#left_join(., dem, by = "sampleID")
mutate(Sample = paste("X", sampleID, sep = "")) %>%
dplyr::select(Sample, everything())
# Save metadata as text for mctoolsr import
length(unique(meta$Sample))
#write.table(meta, "data/metadata104wDEM.txt", row.names = F, sep = "\t")
#### 2. Environment ####
# Assess environmental variation in the 104 samples
names(d)
table(d$vegetation_type)
table(d$local_class)
env_vars <- c("boron_hot_cacl2", "clay", "conductivity",
"dtpa_copper", "dtpa_iron", "dtpa_manganese", "dtpa_zinc",
#"elev",
"exc_aluminium", "exc_calcium", "exc_magnesium",
"exc_potassium", "exc_sodium", "latitude",
"longitude", "nitrate_nitrogen", "organic_carbon",
"ph", "phosphorus_colwell",
"sand", "silt", "sulphur",
#"water_content", # 51 NA
"bio1", "bio12", "AI")
d_AI <- d %>%
dplyr::select(sampleID, AI) %>%
mutate(sampleID = as.character(sampleID))
d_env <- d %>%
dplyr::select(all_of(env_vars))
hist(d_env$organic_carbon)
hist(d_env$nitrate_nitrogen)
hist(d_env$ph)
hist(d_env$bio1)
hist(d_env$bio12)
hist(d_env$clay)
#hist(d_env$water_content)
hist(d_env$conductivity)
#hist(d_env$elev)
hist(d_env$phosphorus_colwell)
hist(d_env$exc_potassium)
# plot(d_env$potassium_colwell, d_env$exc_potassium) # just use one
# Check NA by variable
n_na <- c()
for (i in 1:ncol(d_env)) {
n_na[i] <- sum(is.na(d_env[,i]))
}
n_na
# Most with 27, 37 NA
# 8 with no NAs
# 40 samples with data for all 19 of these columns! no NA.
d_env_nona <- d_env %>%
filter_at(vars(1:24), all_vars(!is.na(.))) %>%
set_names(c("B", "Clay", "Conductivity", "Cu", "Fe", "Mn", "Zn", "Al", "Ca", "Mg",
"K", "Na", "Lat", "Long", "NO3", "Org. C", "pH", "Colwell P",
"Sand", "Silt", "S", "Temp", "Precip", "Aridity")) %>%
dplyr::select(Clay, Silt, Sand, `Org. C`, NO3, `Colwell P`, pH, Conductivity,
B, Cu, Fe, Mn, Zn, Al, Ca, Mg, K, Na, S,
Lat, Long, Temp, Precip, Aridity)
#### 5. Strain Genomics ####
# Run StrainFinder on KBase
# Use the mean coverage and coverage histogram to inform the parameters
# Run for Bradyrhizobium on samples with mean coverage > 4
# First get metadata for those 53 samples
# Plot map and get distance matrix
ani_ref <- read.delim("data/Brady_fastani.txt",
header = F) %>%
set_names("Reference", "Query", "ANI", "Aligned1", "Aligned2") %>%
mutate(Reference = gsub("/scratch/alpine/clbd1748/Australia/BradyStrainsRef/",
"", Reference)) %>%
mutate(Query = gsub("/scratch/alpine/clbd1748/Australia/BradyStrainsRef/",
"", Query)) %>%
filter(grepl("Reference", Reference)) %>%
filter(Query != "BradyReference.fna") %>%
separate(Query, into = c("Brady", "sampleID"), sep = "_", remove = FALSE) %>%
mutate(sampleID = gsub(".fna", "", sampleID)) %>%
mutate(sampleID = as.integer(sampleID)) %>%
dplyr::select(sampleID, ANI)
d_brady <- d %>%
filter(sampleID %in% ani_ref$sampleID) %>%
mutate(sampleID = as.character(sampleID)) %>%
arrange(sampleID)
#### _Analysis ####
input_filt_rare <- readRDS("data/input_filt_rare_mtags.rds")
#### _Brady ####
# Subset to the 53 samples used for StrainFinder
# Check which have the most Bradyrhizobium
# Get MAGs from those
# Goal: get a high quality MAG to compare to StrainFinder for validation
nrow(input_filt_rare$map_loaded)
nrow(d_brady)
class(input_filt_rare$map_loaded$sampleID)
input_filt_rare$map_loaded$sampleID_char <- as.character(input_filt_rare$map_loaded$sampleID)
class(d_brady$sampleID)
sum(d_brady$sampleID %in% input_filt_rare$map_loaded$sampleID_char)
sum(input_filt_rare$map_loaded$sampleID_char %in% d_brady$sampleID)
brady_mtags <- filter_data(input_filt_rare,
filter_cat = "sampleID_char",
filter_vals = d_brady$sampleID)
filtered_map <- input_filt_rare$map_loaded[input_filt_rare$map_loaded$sampleID_char %in% d_brady$sampleID, ]
nrow(filtered_map)
brady_mtags <- filter_data(input_filt_rare,
filter_cat = "sampleID_char",
keep_vals = d_brady$sampleID)
tax_sum_gen <- summarize_taxonomy(input = brady_mtags,
level = 6,
report_higher_tax = F,
relative = T)
View(tax_sum_gen)
brady_abund53 <- as.data.frame(t(tax_sum_gen)) %>%
dplyr::select(Bradyrhizobium) %>%
mutate(sampleID = rownames(.)) %>%
arrange(desc(Bradyrhizobium))
View(brady_abund53)
library(plyr) # For data manipulation
library(tidyverse) # For data manipulation
library(mctoolsr) # For microbial analyses
library(vegan) # For multivariate stats
library(RColorBrewer) # For colors
library(microseq) # For fastas
library(car) # For stats
library(MASS) # For stats
library(FSA) # For SE
library(lme4) # For LMER
library(emmeans) # For TukeyHSD
library(multcomp) # For cld
library(lmerTest) # For Sattherwaite df
library(afex) # For alternative mixed model
library(ggh4x) # For plots
library(ggrepel) # For plot text
library(cowplot) # For multipanel
library(phyloseq) # For networks
library(SpiecEasi) # For networks
library(igraph) # For networks
library(rnetcarto) # For networks
library(writexl) # Export
library(naniar) # For NA management
library(pheatmap) # For heatmaps
library(iCAMP) # NTI
library(ape) # Phylogenetics
library(phyloseq) # microbial analyses, can handle trees
library(picante) # Trees
library(conditionz)
library(taxize) # version 0.9.100.1 from archive
# Repo Directory
setwd("~/Documents/GitHub/SunflowerG/")
# Functions
`%notin%` <- Negate(`%in%`)
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
source("code/effectSize.R")
source("code/run_taxa_null_model.R")
source("code/run_div_null_model.R")
source("code/run_sclero_regressions.R")
MyDiamond <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.frame.color <- params("vertex", "frame.color")
if (length(vertex.frame.color) != 1 && !is.null(v)) {
vertex.frame.color <- vertex.frame.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color, fg=vertex.frame.color,
stars=cbind(vertex.size, vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("diamond", clip=shapes("circle")$clip,
plot=MyDiamond, parameters=list(vertex.frame.color="white",
vertex.frame.width=1))
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("triangle", clip=shapes("circle")$clip,
plot=mytriangle)
#### _Start here ####
input_n3_16S <- readRDS("data/input_filt_16S_noSing.rds")
input_n3_ITS <- readRDS("data/input_filt_ITS_noSing.rds")
input_n3_16S$map_loaded$rich <- specnumber(input_n3_16S$data_loaded,
MARGIN = 2)
input_n3_16S$map_loaded$shannon <- vegan::diversity(input_n3_16S$data_loaded,
index = "shannon",
MARGIN = 2)
input_n3_ITS$map_loaded$rich <- specnumber(input_n3_ITS$data_loaded,
MARGIN = 2)
input_n3_ITS$map_loaded$shannon <- vegan::diversity(input_n3_ITS$data_loaded,
index = "shannon",
MARGIN = 2)
# Filter NCBI flagged seqs
flagged_16S <-read_xlsx("data/NCBI_flagged.xlsx", sheet = 1)
library(readxl)
# Filter NCBI flagged seqs
flagged_16S <-read_xlsx("data/NCBI_flagged.xlsx", sheet = 1)
View(flagged_16S)
repset_16S <- readFasta("data/repset_16S.fasta")
View(flagged_16S)
View(repset_16S)
repset_16S <- readFasta("data/repset_16S.fasta") %>%
filter(Header %notin% flagged_16S$flagged_16S)
microseq::writeFasta(repset_16S, "data/repset_16S_filtered.fasta")
#microseq::writeFasta(repset_16S, "data/repset_16S_filtered.fasta")
flagged_ITS <-read_xlsx("data/NCBI_flagged.xlsx", sheet = 2)
repset_ITS <- readFasta("data/repset_ITS.fasta")
repset_ITS <- readFasta("data/repset_ITS.fasta") %>%
filter(Header %notin% flagged_ITS$flagged_ITS)
microseq::writeFasta(repset_ITS, "data/repset_ITS_filtered.fasta")
# Filter NCBI flagged seqs from biosample assignment
bs16S <- read.table("data/biosample_assignment_16S.tsv")
View(bs16S)
# Filter NCBI flagged seqs from biosample assignment
bs16S <- read.table("data/biosample_assignment_16S.tsv", header = T)
View(bs16S)
# Filter NCBI flagged seqs from biosample assignment
bs16S <- read.table("data/biosample_assignment_16S.tsv", header = T) %>%
filter(Sequence_ID %notin% flagged_16S$flagged_16S)
View(bs16S)
write_tsv(bs16S, file = "data/biosample_assignment_16S_filtered.tsv")
#write_tsv(bs16S, file = "data/biosample_assignment_16S_filtered.tsv")
bsITS <- read.table("data/biosample_assignment_ITS.tsv", header = T) %>%
filter(Sequence_ID %notin% flagged_ITS$flagged_ITS)
write_tsv(bsITS, file = "data/biosample_assignment_ITS_filtered.tsv")
bsITS <- read.table("~/Desktop/Kane/Carrington/source_modifiers.tsv", header = T)
bsITS <- read.table("~/Desktop/Kane/Carrington/source_modifiers.tsv", header = T)
bsITS <- read.table("~/Desktop/Kane/Carrington/source_modifiers.tsv", header = T)
bsITS <- read.table("~/Desktop/Kane/Carrington/source_modifiers.tsv", header = T,
sep = ",")
View(bsITS)
bsITS <- read.table("~/Desktop/Kane/Carrington/source_modifiers.tsv", header = T,
sep = " ")
View(bsITS)
bsITS <- read_xlsx("~/Desktop/Kane/Carrington/source_modifiers.xlsx", header = T)
bsITS <- read_xlsx("~/Desktop/Kane/Carrington/source_modifiers.xlsx")
View(bsITS)
#write_tsv(bs16S, file = "data/biosample_assignment_16S_filtered.tsv")
bsITS <- read_xlsx("~/Desktop/Kane/Carrington/source_modifiers.xlsx") %>%
filter(Sequence_ID %notin% flagged_ITS$flagged_ITS)
View(bsITS)
write_csv(bsITS, file = "data/source_modifiers_ITS_filtered.csv")
